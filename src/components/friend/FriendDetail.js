// FriendDetail.js
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import {
    Card, Avatar, Button, Spin, Tag, Divider, Empty, Tabs, message, Modal
} from 'antd';
import {
    UserOutlined, EnvironmentOutlined, TrophyOutlined,
    CompassOutlined, BookOutlined, SendOutlined,
    RollbackOutlined, HeartOutlined, HomeOutlined,
    TeamOutlined
} from '@ant-design/icons';
import FriendLayout from './FriendLayout';
import styles from '../../assets/css/friend/FriendDetail.module.css';

const { TabPane } = Tabs;
const { Meta } = Card;

// ÂåπÈÖçÁ±ªÂûãÊò†Â∞Ñ
const MATCH_TYPE_MAP = {
    GAME: { label: 'Ê∏∏ÊàèÊê≠Â≠ê', icon: 'üéÆ', color: '#722ed1' },
    HOBBY: { label: 'ÂÖ¥Ë∂£Êê≠Â≠ê', icon: '‚≠ê', color: '#fa8c16' },
    STUDY: { label: 'Â≠¶‰π†Êê≠Â≠ê', icon: 'üìö', color: '#52c41a' },
    SPORTS: { label: 'ËøêÂä®Êê≠Â≠ê', icon: '‚öΩ', color: '#1890ff' },
    TALENT: { label: 'ÁâπÈïøÊê≠Â≠ê', icon: 'üé®', color: '#eb2f96' },
    TRAVEL: { label: 'ÊóÖÊ∏∏Êê≠Â≠ê', icon: '‚úàÔ∏è', color: '#13c2c2' },
    COMPREHENSIVE: { label: 'ÁªºÂêàÂåπÈÖç', icon: 'ü§ù', color: '#faad14' }
};

// ÊäÄËÉΩÁ≠âÁ∫ßÊò†Â∞Ñ
const SKILL_LEVEL_MAP = {
    BEGINNER: { label: 'ÂÖ•Èó®', color: 'green' },
    INTERMEDIATE: { label: 'ËøõÈò∂', color: 'blue' },
    ADVANCED: { label: 'Á≤æÈÄö', color: 'purple' },
    EXPERT: { label: '‰∏ìÂÆ∂', color: 'magenta' },
    PROFESSIONAL: { label: '‰∏ì‰∏ö', color: 'red' }
};

// ÊóÖË°åÁ±ªÂûãÊò†Â∞Ñ
const TRAVEL_TYPE_MAP = {
    CULTURAL: { label: 'ÊñáÂåñÊ∏∏', color: 'magenta' },
    SCENERY: { label: 'È£éÊôØÊ∏∏', color: 'green' },
    FOOD: { label: 'ÁæéÈ£üÊ∏∏', color: 'orange' },
    ADVENTURE: { label: 'Êé¢Èô©Ê∏∏', color: 'red' },
    SHOPPING: { label: 'Ë¥≠Áâ©Ê∏∏', color: 'purple' },
    PHOTOGRAPHY: { label: 'ÊëÑÂΩ±Ê∏∏', color: 'blue' }
};

// Â≠£ËäÇÊò†Â∞Ñ
const SEASON_MAP = {
    SPRING: 'Êò•Â≠£',
    SUMMER: 'Â§èÂ≠£',
    AUTUMN: 'ÁßãÂ≠£',
    WINTER: 'ÂÜ¨Â≠£'
};

const FriendDetail = () => {
    const { id } = useParams();
    const navigate = useNavigate();

    // Áä∂ÊÄÅÁÆ°ÁêÜ
    const [loading, setLoading] = useState(true);
    const [profileData, setProfileData] = useState(null);
    const [matchData, setMatchData] = useState(null);
    const [error, setError] = useState('');
    const [isContactModalVisible, setIsContactModalVisible] = useState(false);
    const [contactInfo, setContactInfo] = useState('');
    const [requestLoading, setRequestLoading] = useState(false);
    const [contactRequestModalVisible, setContactRequestModalVisible] = useState(false);

    // Ëé∑ÂèñÊê≠Â≠êËØ¶ÊÉÖÊï∞ÊçÆ
    useEffect(() => {
        const fetchFriendDetails = async () => {
            setLoading(true);
            setError('');

            try {
                // ‰ΩøÁî®Áªü‰∏ÄÁöÑÊê≠Â≠êËØ¶ÊÉÖÁ´ØÁÇπËé∑ÂèñÊâÄÊúâ‰ø°ÊÅØ
                const detailResponse = await fetch(
                    `http://127.0.0.1:8080/api/friend/detail/${id}`,
                    { credentials: 'include' }
                );

                if (!detailResponse.ok) {
                    throw new Error('Ëé∑ÂèñÊê≠Â≠êËµÑÊñôÂ§±Ë¥•');
                }

                const detailData = await detailResponse.json();

                // ÂàÜÂà´ËÆæÁΩÆÁî®Êà∑Ê°£Ê°àÂíåÂåπÈÖç‰ø°ÊÅØ
                setProfileData(detailData.profile);

                // ÊèêÂèñÂåπÈÖçÁõ∏ÂÖ≥‰ø°ÊÅØÂπ∂ËÆæÁΩÆÂà∞matchData
                const matchData = {
                    matchId: detailData.matchId,
                    matchScore: detailData.matchScore,
                    matchStatus: detailData.matchStatus,
                    isRequestSent: detailData.isRequestSent,
                    isRequestReceived: detailData.isRequestReceived,
                    matchDetails: detailData.matchDetails,
                    commonItems: detailData.commonItems
                };

                setMatchData(matchData);
            } catch (error) {
                console.error('Ëé∑ÂèñÊê≠Â≠êËØ¶ÊÉÖÂ§±Ë¥•:', error);
                setError('Ëé∑ÂèñÊê≠Â≠êËµÑÊñôÂ§±Ë¥•ÔºåËØ∑Á®çÂêéÈáçËØï');
            } finally {
                setLoading(false);
            }
        };

        fetchFriendDetails();
    }, [id]);

    // Â§ÑÁêÜËøîÂõûÂàóË°®Êìç‰Ωú
    const handleBack = () => {
        navigate(-1);
    };

    // Â§ÑÁêÜÂèëÈÄÅËÅîÁ≥ªËØ∑Ê±Ç
    const handleContactRequest = async () => {
        setRequestLoading(true);

        try {
            const response = await fetch(
                `http://127.0.0.1:8080/api/friend/request/${id}`,
                {
                    method: 'POST',
                    credentials: 'include'
                }
            );

            if (!response.ok) {
                throw new Error('ÂèëÈÄÅËØ∑Ê±ÇÂ§±Ë¥•');
            }

            message.success('ËÅîÁ≥ªÊñπÂºè‰∫§Êç¢ËØ∑Ê±ÇÂ∑≤ÂèëÈÄÅ');
            setContactRequestModalVisible(false);
        } catch (error) {
            console.error('ÂèëÈÄÅËÅîÁ≥ªËØ∑Ê±ÇÂ§±Ë¥•:', error);
            message.error('ÂèëÈÄÅËØ∑Ê±ÇÂ§±Ë¥•ÔºåËØ∑Á®çÂêéÈáçËØï');
        } finally {
            setRequestLoading(false);
        }
    };

    // Â§ÑÁêÜÊü•ÁúãËÅîÁ≥ªÊñπÂºè
    const handleViewContact = async () => {
        setRequestLoading(true);

        try {
            const response = await fetch(
                `http://127.0.0.1:8080/api/friend/contact/${id}`,
                { credentials: 'include' }
            );

            if (!response.ok) {
                throw new Error('Ëé∑ÂèñËÅîÁ≥ªÊñπÂºèÂ§±Ë¥•');
            }

            const contact = await response.text();
            setContactInfo(contact);
            setIsContactModalVisible(true);
        } catch (error) {
            console.error('Ëé∑ÂèñËÅîÁ≥ªÊñπÂºèÂ§±Ë¥•:', error);
            message.error('Ëé∑ÂèñËÅîÁ≥ªÊñπÂºèÂ§±Ë¥•ÔºåËØ∑ÂÖàÂèëÈÄÅËÅîÁ≥ªËØ∑Ê±Ç');
        } finally {
            setRequestLoading(false);
        }
    };

    // Ê∏≤ÊüìÂåπÈÖçÂàÜÊï∞
    const renderMatchScore = () => {
        if (!matchData || matchData.matchScore === undefined) return null;

        const matchPercentage = Math.round(matchData.matchScore * 100);
        let color = '#1890ff';

        if (matchPercentage >= 80) color = '#f5222d';
        else if (matchPercentage >= 60) color = '#fa8c16';
        else if (matchPercentage >= 40) color = '#52c41a';

        return (
            <div className={styles.matchScoreContainer}>
                <div className={styles.matchScoreTitle}>ÂåπÈÖçÂ∫¶</div>
                <div
                    className={styles.matchScoreValue}
                    style={{ color: color }}
                >
                    {matchPercentage}%
                </div>
                {matchData.matchDetails && (
                    <div className={styles.matchDetailTags}>
                        {Object.entries(matchData.matchDetails)
                            .filter(([key, value]) => key.includes('Count') && value > 0)
                            .map(([key, value]) => {
                                const label = key.replace('common', '').replace('Count', '');
                                return (
                                    <Tag key={key} color="blue">
                                        ÂÖ±Âêå{label}: {value}
                                    </Tag>
                                );
                            })}
                    </div>
                )}
            </div>
        );
    };

    // Ê∏≤ÊüìÂÖ¥Ë∂£Áà±Â•ΩÂàóË°®
    const renderHobbies = () => {
        if (!profileData?.hobbies || profileData.hobbies.length === 0) {
            return <Empty description="ÊöÇÊó†ÂÖ¥Ë∂£Áà±Â•Ω" />;
        }

        return (
            <div className={styles.tagList}>
                {profileData.hobbies.map((hobby, index) => (
                    <Tag
                        key={index}
                        color="blue"
                        icon={<HeartOutlined />}
                        className={styles.itemTag}
                    >
                        {hobby}
                    </Tag>
                ))}
            </div>
        );
    };

    // Ê∏≤ÊüìÊ∏∏ÊàèÊäÄËÉΩÂàóË°®
    const renderGameSkills = () => {
        if (!profileData?.gameSkills || profileData.gameSkills.length === 0) {
            return <Empty description="ÊöÇÊó†Ê∏∏ÊàèÊäÄËÉΩ" />;
        }

        return (
            <div className={styles.skillList}>
                {profileData.gameSkills.map((skill, index) => (
                    <Card key={index} className={styles.skillCard}>
                        <div className={styles.skillName}>{skill.gameName}</div>
                        <div className={styles.skillDetails}>
                            <Tag color={SKILL_LEVEL_MAP[skill.skillLevel]?.color || 'blue'}>
                                {SKILL_LEVEL_MAP[skill.skillLevel]?.label || skill.skillLevel}
                            </Tag>
                            {skill.rank && <Tag color="cyan">ÊÆµ‰Ωç: {skill.rank}</Tag>}
                            {skill.preferredPosition && (
                                <Tag color="gold">ÂÆö‰Ωç: {skill.preferredPosition}</Tag>
                            )}
                        </div>
                    </Card>
                ))}
            </div>
        );
    };

    // Ê∏≤ÊüìÁâπÈïøÂàóË°®
    const renderTalents = () => {
        if (!profileData?.talents || profileData.talents.length === 0) {
            return <Empty description="ÊöÇÊó†ÁâπÈïø" />;
        }

        return (
            <div className={styles.skillList}>
                {profileData.talents.map((talent, index) => (
                    <Card key={index} className={styles.skillCard}>
                        <div className={styles.skillName}>{talent.talentName}</div>
                        <div className={styles.skillDetails}>
                            <Tag color={SKILL_LEVEL_MAP[talent.proficiency]?.color || 'blue'}>
                                {SKILL_LEVEL_MAP[talent.proficiency]?.label || talent.proficiency}
                            </Tag>
                            {talent.canTeach && <Tag color="green">ÂèØÊïôÊéà</Tag>}
                            {talent.certification && <Tag color="volcano">ËØÅ‰π¶: {talent.certification}</Tag>}
                        </div>
                    </Card>
                ))}
            </div>
        );
    };

    // Ê∏≤ÊüìËøêÂä®ÂàóË°®
    const renderSports = () => {
        if (!profileData?.sports || profileData.sports.length === 0) {
            return <Empty description="ÊöÇÊó†ËøêÂä®È°πÁõÆ" />;
        }

        return (
            <div className={styles.tagList}>
                {profileData.sports.map((sport, index) => (
                    <Tag
                        key={index}
                        color="cyan"
                        className={styles.itemTag}
                    >
                        {sport}
                    </Tag>
                ))}
            </div>
        );
    };

    // Ê∏≤ÊüìÂ≠¶‰π†ÁßëÁõÆÂàóË°®
    const renderStudySubjects = () => {
        if (!profileData?.studySubjects || profileData.studySubjects.length === 0) {
            return <Empty description="ÊöÇÊó†Â≠¶‰π†ÁßëÁõÆ" />;
        }

        return (
            <div className={styles.tagList}>
                {profileData.studySubjects.map((subject, index) => (
                    <Tag
                        key={index}
                        color="green"
                        icon={<BookOutlined />}
                        className={styles.itemTag}
                    >
                        {subject}
                    </Tag>
                ))}
            </div>
        );
    };

    // Ê∏≤ÊüìÊóÖË°åÁõÆÁöÑÂú∞ÂàóË°®
    const renderTravelDestinations = () => {
        if (!profileData?.travelDestinations || profileData.travelDestinations.length === 0) {
            return <Empty description="ÊöÇÊó†ÊóÖË°åÁõÆÁöÑÂú∞" />;
        }

        return (
            <div className={styles.destinationList}>
                {profileData.travelDestinations.map((destination, index) => (
                    <Card key={index} className={styles.destinationCard}>
                        <div className={styles.destinationHeader}>
                          <span className={styles.destinationName}>
                            {destination.destination}
                          </span>
                            <Tag color={TRAVEL_TYPE_MAP[destination.travelType]?.color || 'blue'}>
                                {TRAVEL_TYPE_MAP[destination.travelType]?.label || destination.travelType}
                            </Tag>
                        </div>
                        <div className={styles.destinationDetails}>
                            <Tag color="blue" icon={<EnvironmentOutlined />}>
                                {destination.province}, {destination.country}
                            </Tag>
                            {destination.expectedSeason && (
                                <Tag color="gold">
                                    {SEASON_MAP[destination.expectedSeason] || destination.expectedSeason}
                                </Tag>
                            )}
                        </div>
                    </Card>
                ))}
            </div>
        );
    };

    // Â¶ÇÊûúÊ≠£Âú®Âä†ËΩΩÔºåÊòæÁ§∫Âä†ËΩΩÁä∂ÊÄÅ
    if (loading) {
        return (
            <FriendLayout background="detail">
                <div className={styles.loadingContainer}>
                    <Spin size="large" tip="Âä†ËΩΩ‰∏≠..." />
                </div>
            </FriendLayout>
        );
    }

    // Â¶ÇÊûúÂä†ËΩΩÂá∫ÈîôÔºåÊòæÁ§∫ÈîôËØØ‰ø°ÊÅØ
    if (error) {
        return (
            <FriendLayout background="detail">
                <div className={styles.errorContainer}>
                    <Empty
                        description={error}
                        image={Empty.PRESENTED_IMAGE_SIMPLE}
                    />
                    <Button
                        type="primary"
                        icon={<RollbackOutlined />}
                        onClick={handleBack}
                        style={{ marginTop: 16 }}
                    >
                        ËøîÂõû‰∏ä‰∏ÄÈ°µ
                    </Button>
                </div>
            </FriendLayout>
        );
    }

    // Â¶ÇÊûúÊ≤°ÊúâÊâæÂà∞ËµÑÊñôÔºåÊòæÁ§∫ÊèêÁ§∫
    if (!profileData) {
        return (
            <FriendLayout background="detail">
                <div className={styles.errorContainer}>
                    <Empty description="Êú™ÊâæÂà∞Áî®Êà∑ËµÑÊñô" />
                    <Button
                        type="primary"
                        icon={<RollbackOutlined />}
                        onClick={handleBack}
                        style={{ marginTop: 16 }}
                    >
                        ËøîÂõû‰∏ä‰∏ÄÈ°µ
                    </Button>
                </div>
            </FriendLayout>
        );
    }

    return (
        <FriendLayout background="detail">
            <div className={styles.headerActions}>
                <Button
                    icon={<RollbackOutlined />}
                    onClick={handleBack}
                >
                    ËøîÂõûÂàóË°®
                </Button>
            </div>

            <Card className={styles.profileCard}>
                <div className={styles.profileHeader}>
                    <Meta
                        avatar={
                            <Avatar
                                size={80}
                                icon={<UserOutlined />}
                                src={profileData.avatarUrl}
                            />
                        }
                        title={
                            <div className={styles.profileTitle}>
                                <h2>{profileData.username}</h2>
                                <Tag
                                    color={MATCH_TYPE_MAP[profileData.preferredMatchType]?.color || 'blue'}
                                    icon={<TeamOutlined />}
                                    className={styles.matchTypeTag}
                                >
                                    {MATCH_TYPE_MAP[profileData.preferredMatchType]?.icon}
                                    {MATCH_TYPE_MAP[profileData.preferredMatchType]?.label || profileData.preferredMatchType}
                                </Tag>
                            </div>
                        }
                        description={
                            <div className={styles.profileBasicInfo}>
                                <Tag icon={<HomeOutlined />} color="processing">
                                    {profileData.university}
                                </Tag>
                            </div>
                        }
                    />

                    <div className={styles.profileActions}>
                        <Button
                            type="primary"
                            icon={<SendOutlined />}
                            onClick={() => setContactRequestModalVisible(true)}
                            loading={requestLoading}
                        >
                            ËØ∑Ê±ÇËÅîÁ≥ªÊñπÂºè
                        </Button>
                        <Button
                            type="default"
                            onClick={handleViewContact}
                            loading={requestLoading}
                        >
                            Êü•ÁúãËÅîÁ≥ªÊñπÂºè
                        </Button>
                    </div>
                </div>

                <Divider />

                <div className={styles.profileContent}>
                    <div className={styles.profileMain}>
                        <Tabs defaultActiveKey="hobbies" tabPosition="left">
                            <TabPane
                                tab={<span><HeartOutlined /> ÂÖ¥Ë∂£Áà±Â•Ω</span>}
                                key="hobbies"
                            >
                                {renderHobbies()}
                            </TabPane>
                            <TabPane
                                tab={<span><TrophyOutlined /> Ê∏∏ÊàèÊäÄËÉΩ</span>}
                                key="games"
                            >
                                {renderGameSkills()}
                            </TabPane>
                            <TabPane
                                tab={<span><TrophyOutlined /> ÁâπÈïø</span>}
                                key="talents"
                            >
                                {renderTalents()}
                            </TabPane>
                            <TabPane
                                tab={<span><TeamOutlined /> ËøêÂä®È°πÁõÆ</span>}
                                key="sports"
                            >
                                {renderSports()}
                            </TabPane>
                            <TabPane
                                tab={<span><BookOutlined /> Â≠¶‰π†ÁßëÁõÆ</span>}
                                key="study"
                            >
                                {renderStudySubjects()}
                            </TabPane>
                            <TabPane
                                tab={<span><CompassOutlined /> ÊóÖË°åÁõÆÁöÑÂú∞</span>}
                                key="travel"
                            >
                                {renderTravelDestinations()}
                            </TabPane>
                        </Tabs>
                    </div>

                    <div className={styles.profileSidebar}>
                        {renderMatchScore()}
                    </div>
                </div>
            </Card>

            {/* ËÅîÁ≥ªÊñπÂºèÊü•ÁúãÊ®°ÊÄÅÊ°Ü */}
            <Modal
                title="ËÅîÁ≥ªÊñπÂºè"
                visible={isContactModalVisible}
                onCancel={() => setIsContactModalVisible(false)}
                footer={[
                    <Button key="close" onClick={() => setIsContactModalVisible(false)}>
                        ÂÖ≥Èó≠
                    </Button>
                ]}
            >
                <p className={styles.contactInfo}>{contactInfo}</p>
            </Modal>

            {/* ËÅîÁ≥ªËØ∑Ê±ÇÁ°ÆËÆ§Ê®°ÊÄÅÊ°Ü */}
            <Modal
                title="ÂèëÈÄÅËÅîÁ≥ªÊñπÂºè‰∫§Êç¢ËØ∑Ê±Ç"
                visible={contactRequestModalVisible}
                onOk={handleContactRequest}
                onCancel={() => setContactRequestModalVisible(false)}
                confirmLoading={requestLoading}
                okText="ÂèëÈÄÅËØ∑Ê±Ç"
                cancelText="ÂèñÊ∂à"
            >
                <p>
                    ‰Ω†Á°ÆÂÆöË¶ÅÂêë <strong>{profileData.username}</strong> ÂèëÈÄÅËÅîÁ≥ªÊñπÂºè‰∫§Êç¢ËØ∑Ê±ÇÂêóÔºü
                </p>
                <p>
                    ÂØπÊñπÊé•ÂèóËØ∑Ê±ÇÂêéÔºå‰Ω†‰ª¨Â∞ÜÂèØ‰ª•ÁúãÂà∞ÂΩºÊ≠§ÁöÑËÅîÁ≥ªÊñπÂºè„ÄÇ
                </p>
            </Modal>
        </FriendLayout>
    );
};

export default FriendDetail;